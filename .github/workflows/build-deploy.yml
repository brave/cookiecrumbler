name: Build and Deploy

on:
  workflow_dispatch:
  schedule:
    - cron: '*/30 * * * *' # Run every 30 minutes
  push:
    branches:
      - main

concurrency:
  group: build-deploy
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read # This is required for actions/checkout

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:
      - name: Git clone the repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349 # v3.7.1
        with:
          install: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          role-to-assume: ${{ secrets.COOKIEMONSTER_AWS_ROLE_ARN }}
          role-session-name: github-actions-ecr
          aws-region: us-west-2

      - name: Login to public Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1

      - name: Generate variables
        id: vars
        run: |
          # Run a full build twice a day
          echo "FULL_CACHEBUST=$(date +'%Y-%m-%d-%p')" >> "$GITHUB_OUTPUT"
          # Setup fresh profile every time
          echo "SETUP_CACHEBUST=$(date +'%Y-%m-%dT%H%M%S')" >> "$GITHUB_OUTPUT"
          echo "START_TIMESTAMP=$(date +%s)" >> "$GITHUB_OUTPUT"

      - name: Build, tag, and push image to Amazon ECR
        uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75 # v6
        with:
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ vars.COOKIEMONSTER_ECR_REPOSITORY }}:latest
          build-args: |
            FULL_CACHEBUST=${{ steps.vars.outputs.FULL_CACHEBUST }}
            SETUP_CACHEBUST=${{ steps.vars.outputs.SETUP_CACHEBUST }}
          cache-from: type=gha
          cache-to: type=gha,mode=max,compression=zstd
          outputs: type=image,oci-mediatypes=true,compression=zstd,compression-level=3,force-compression=true,push=true

      - name: Trigger ECS deployment
        run: |
          aws ecs update-service --cluster ${{ vars.COOKIEMONSTER_ECS_CLUSTER_NAME }} --service ${{ vars.COOKIEMONSTER_ECS_SERVICE_NAME }} --force-new-deployment --query service.serviceName --output text
          if [ $(($(date +%s) - ${{ steps.vars.outputs.START_TIMESTAMP }})) -gt 105 ]; then
            aws ecs wait services-stable --cluster ${{ vars.COOKIEMONSTER_ECS_CLUSTER_NAME }} --services ${{ vars.COOKIEMONSTER_ECS_SERVICE_NAME }}
          fi
