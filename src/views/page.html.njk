<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <title>cookiemonster</title>
    <style>
* {
  font-family: sans-serif;
}
html {
  min-height: 100%;
  display: flex;
  flex-direction: column;
}
body {
  background: #eee;
  font-size: 1.25em;
  margin: 2em;
  flex: 1;
  display: flex;
  flex-direction: column;
}
h1 {
  font-family: Poppins, fantasy;
  margin: unset;
}
footer a[href] {
  color: #8ad;
  text-decoration: none;
}
pre,code {
  font-family: monospace;
  background: #eee;
  border-radius: 0.2em;
  padding: 0.5em;
}
code {
  padding: 0.2em 0.5em;
}
#controls {
  display: flex;
  flex-direction: column;
  gap: 1em;
}
.row {
  display: flex;
  flex-direction: row;
}
fieldset {
  border: 2px solid #ddd;
  border-radius: 0.2em;
  color: #888;
}
input[type="url"],button {
  font-size: 1.5em;
  height: 50px;
  border: none;
  border-radius: 0.2em;
  padding: 0 0.75em;
  flex: 1;
}
button {
  background: #bdf;
  margin-left: 0.25em;
  transition: background 1s, box-shadow 0.2s;
  cursor: pointer;
  min-width: 15em;
  flex: 0;
}
button:hover {
  background: linear-gradient(to right, #dbf, #ffb);
  box-shadow: 0 0 1em #fff;
}
input[type="url"] {
  font-family: monospace;
  width: 40em;
}
select {
  font-family: monospace; /* Sets the font to monospace */
  width: 30em;            /* Sets the width of the select element */
  padding: 0.5em;         /* Adds some padding for better appearance */
  border: 1px solid #ccc; /* Adds a border similar to input fields */
  border-radius: 4px;     /* Rounds the corners of the select box */
  background-color: #fff; /* Sets the background color */
  color: #333;            /* Sets the text color */
}
select option {
  font-family: monospace; /* Ensures the option text uses the same font */
  color: #333;            /* Sets the text color for options */
  background-color: #fff; /* Sets the background color for options */
}
img {
  box-shadow: 0 0 0.5em #ccc;
}
img:hover {
  box-shadow: 0 0 1em #888;
}

#reportlist {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 2em;
  margin: 2em 0;
}
.report-card {
  background: white;
  padding: 1em 2.5em 2.5em 2.5em;
  border-radius: 0.25em;
  box-shadow: 0 0 0.1em #ccc;
}
.datestring {
  font-style: italic;
  color: #888;
}
#spinner {
  font-size: 3em;
  display: none;
  width: 3em;
  height: 3em;
  margin: auto;
  text-align: center;
  line-height: 3em;
}
#spinner.active {
  display: block;
  animation: spin 1s linear infinite;
}
@keyframes spin {
  100% {
    transform: rotate(360deg);
  }
}
details pre {
  white-space: pre-wrap;
}
#devices-select {
  width: 15em; /* Shortens the width of the devices-select dropdown */
}

.version {
  color: #888;
  margin-left: 1em;
  user-select: none;
  -webkit-user-select: none;
  cursor: default;
}

.toast-message {
  position: fixed;
  bottom: 50px;
  left: 50%;
  transform: translateX(-50%);
  background: rgba(0, 0, 0, 0.8);
  color: white;
  padding: 12px 24px;
  border-radius: 24px;
  font-size: 14px;
  display: none;
  z-index: 1000;
}
.warning-icon {
  background: hsl(45deg 100% 85%);
  color: hsl(45deg 100% 20%);
  padding: 0.25em 1em;
  margin-left: 0.5em;
  border-radius: 1em;
  cursor: help;
}

#locations {
  display: none;
}
#locations:has(option:not([value=""])) {
  display: block;
}

.mhtml-link {
  font-size: 0.5em;
}
.mhtml-link a {
  color: #8ad;
}

.filter-input {
  width: 100%;
  margin-bottom: 0.5em;
  padding: 0.5em;
  box-sizing: border-box;
  font-family: monospace;
}

.copy-rules-button {
  fontSize: 0.8em;
  padding: 0.5em 1em;
  margin-bottom: 0.5em;
}
    </style>
  </head>
  <body>
    <h1>cookiemonster</h1>
    <p>Enter a URL to scan it for cookie notices.</p>
    <form id="controls">
      <div class="row">
        <input type="url" id="url-input" name="url-input" placeholder="https://example.com" autofocus required/>
        <button type="submit" id="execute">Check for cookie notices ‚Ü™</button>
      </div>
      <div class="row">
      <fieldset id="adblock-lists">
        <legend>
          <input type="checkbox" id="toggle-all-lists" checked>
          <label for="toggle-all-lists">Enabled lists</label>
        </legend>
      </fieldset>

      <fieldset id="locations">
        <legend>Choose a location:</legend>
        <select id="locations-select" name="locations">
          <option value="">direct</option>
        </select>
      </fieldset>

      <fieldset id="other">
        <legend>Other options:</legend>
        <label><input type="checkbox" id="full_page_screenshot" name="full_page_screenshot">Full page screenshot</label>
        <br>
        <label><input type="checkbox" id="slow_check" name="slow_check">Thorough check (slow)</label>
        <br>
        <label>Device:</label>
        <select id="devices-select" name="devices">
          <option value="">default</option>
        </select>
      </fieldset>

      <fieldset id="dev_menu" style="display: none;">
        <legend>Dev menu</legend>
        <label>MHTML mode:
          <select id="mhtml-mode-select" name="mhtml-mode">
            <option value="full">Full</option>
            <option value="optimized">Optimized</option>
          </select>
        </label>
        <br>
        <label>Include MHTML:
          <select id="mhtml-include-select" name="mhtml-include">
            <option value="never">Never</option>
            <option value="always">Always</option>
            <option value="onDetection">On Detection</option>
          </select>
        </label>
        <br>
      </fieldset>
      </div>
    </form>
    <div id="spinner">üç™</div>
    <div id="reportlist"></div>
    <footer>
      <a href="https://github.com/brave/cookiemonster">Source code</a>
      <span class="version">{{ version }}</span>
      <div class="toast-message"></div>
    </footer>
    <script>
      const version = document.querySelector('.version');
      const toast = document.querySelector('.toast-message');
      const devMenu = document.getElementById('dev_menu');
      let clicks = 0;
      let clickTimer;
      const REQUIRED_CLICKS = 7;

      if (localStorage.getItem('devModeEnabled') === 'true') {
        devMenu.style.display = 'block';
      }

      function showToast(message, duration = 2000) {
        toast.textContent = message;
        toast.style.display = 'block';
        setTimeout(() => {
          toast.style.display = 'none';
        }, duration);
      }

      version.addEventListener('click', (e) => {
        clicks++;

        clearTimeout(clickTimer);
        clickTimer = setTimeout(() => {
          clicks = 0;
        }, 2000);

        if (clicks === REQUIRED_CLICKS) {
          devMenu.style.display = 'block';
          localStorage.setItem('devModeEnabled', 'true');
          showToast('Dev mode enabled', 3000);
          clicks = 0;
        } else if (clicks > 2) {
          const remaining = REQUIRED_CLICKS - clicks;
          showToast(`You are now ${remaining} ${remaining === 1 ? 'step' : 'steps'} away from being a developer`);
        }
      });
    </script>
    <script type="module">
      function toggleAllLists(checked) {
          const checkboxes = document.querySelectorAll('#adblock-lists input[type="checkbox"]:not(#toggle-all-lists)');
          checkboxes.forEach(checkbox => {
            checkbox.checked = checked;
          });
      }
      document.getElementById('toggle-all-lists').onchange = function() { toggleAllLists(this.checked); };
      document.addEventListener("DOMContentLoaded", async function() {
        // Fetch additional capabilities from the server and populate the UI accordingly
        const configEndpoints = {
          adblock_lists: adblock_lists => {
            const fieldset = document.getElementById('adblock-lists');
            for (const [uuid, name] of Object.entries(adblock_lists)) {
              const checkbox = document.createElement('input');
              checkbox.type = 'checkbox';
              checkbox.id = uuid;
              checkbox.name = name;
              checkbox.checked = true;

              const label = document.createElement('label');
              label.htmlFor = uuid;
              label.textContent = name;

              fieldset.appendChild(checkbox);
              fieldset.appendChild(label);
              fieldset.appendChild(document.createElement('br'));
            }
          },
          proxy_list: proxy_list => {
            const locationsSelectElement = document.getElementById('locations-select');
            for (const continent in proxy_list) {
              const continentGroup = document.createElement("optgroup");
              continentGroup.label = continent;
              for (const country in proxy_list[continent]) {
                const countryPrefix = `${country} - `;
                for (const city in proxy_list[continent][country]) {
                  const option = document.createElement("option");
                  option.value = proxy_list[continent][country][city];
                  option.textContent = `${countryPrefix}${city}`;
                  continentGroup.appendChild(option);
                }
              }
              locationsSelectElement.appendChild(continentGroup);
            }
          },
          device_list: device_list => {
            const devicesSelectElement = document.getElementById('devices-select');
            device_list.forEach(deviceName => {
              const option = document.createElement("option");
              option.value = deviceName;
              option.textContent = deviceName;
              devicesSelectElement.appendChild(option);
            });
          },
        };
        Object.keys(configEndpoints).forEach(endpoint => {
          const configRoutine = configEndpoints[endpoint];
          fetch('/' + endpoint + '.json')
            .then(response => response.json())
            .then(configRoutine);
        });
      });
      const urlInput = document.getElementById('url-input');
      const locationSelector = document.getElementById('locations-select');
      const executeButton = document.getElementById('execute');
      const spinner = document.getElementById('spinner');
      const reportList = document.getElementById('reportlist');
      const form = document.getElementById('controls');

      function createReportCard(report) {
        const card = document.createElement('div');
        card.classList.add('report-card');
        card.setAttribute('data-report', JSON.stringify(report));

        const h2 = document.createElement('h2');
        h2.textContent = 'Report for ';
        const code = document.createElement('code');
        code.textContent = report.url;
        h2.appendChild(code);

        if (report.mhtml) {
          const mhtmlLink = document.createElement('a');
          mhtmlLink.textContent = '[mhtml]';
          const blob = new Blob([report.mhtml], { type: 'application/x-mimearchive' });
          const url = window.URL.createObjectURL(blob);
          mhtmlLink.href = url;
          const date = new Date(report.timestamp);
          const dateStr = date.toISOString().slice(0,10);
          const timeStr = date.toTimeString().slice(0,8);
          mhtmlLink.download = `${new URL(report.url).hostname}_${dateStr}_${timeStr}.mhtml`;
          const mhtmlSpan = document.createElement('span');
          mhtmlSpan.appendChild(mhtmlLink);
          mhtmlSpan.classList.add('mhtml-link');
          h2.appendChild(mhtmlSpan);
        }
        
        card.appendChild(h2);

        if (report.url !== report.originalUrl) {
          const h3 = document.createElement('h3');
          h3.textContent = 'redirected from ';
          const code = document.createElement('code');
          code.textContent = report.originalUrl;
          h3.appendChild(code);
          card.appendChild(h3);
        }

        const datestring = document.createElement('p');
        datestring.classList.add('datestring');
        datestring.textContent = new Date(report.timestamp).toString();
        card.appendChild(datestring);

        if (report.error !== undefined) {
          const p = document.createElement('p');
          p.textContent = 'An error occurred:';
          card.appendChild(p);
          const pre = document.createElement('pre');
          pre.textContent = report.error;
          card.appendChild(pre);
          return card;
        }

        const appendClassifierWarning = (p, report) => {
          if (report.classifiersUsed.includes('keyword')) {
            const span = document.createElement('span');
            span.textContent = '!';
            span.classList.add('warning-icon')
            span.title = 'Fallback classifier used. Result may be inaccurate.';
            p.appendChild(span);
          }
        }

        if (report.identified !== true) {
          const p = document.createElement('p');
          p.textContent = 'No cookie consent notices were identified.';
          appendClassifierWarning(p, report)
          card.appendChild(p);
        } else {
          const p = document.createElement('p');
          p.textContent = 'A cookie consent notice was identified.';
          appendClassifierWarning(p, report)
          card.appendChild(p);

          if (report.hideableIds !== undefined && report.hideableIds.length > 0) {
            const idList = document.createElement('pre');
            idList.textContent = report.hideableIds.map(id => `#${id}`).join('\n');
            card.appendChild(idList);
          }

          if (report.markup !== undefined) {
            const details = document.createElement('details');

            const summary = document.createElement('summary');
            summary.textContent = 'Inspect';
            details.appendChild(summary);

            const markup = document.createElement('pre');
            markup.textContent = report.markup;
            details.appendChild(markup);

            card.appendChild(details);
          }
        }

        if (report.scrollBlocked === true) {
          const p = document.createElement('p');
          p.textContent = 'Scrolling may be prevented on this page.';
          card.appendChild(p);
        }

        if (report.screenshot !== undefined) {
          const img = document.createElement('img');
          img.src = 'data:image/webp;base64,' + report.screenshot;
          img.onload = function() {
              // if the screenshot is large, display it in a details element
              // TODO: adjust size based on user screen size?
              if (this.width > 800 || this.height > 600) {
                const details = document.createElement('details');
                const summary = document.createElement('summary');
                summary.textContent = 'Screenshot';
                details.appendChild(summary);
                details.appendChild(img);
                card.appendChild(details);
              } else {
                const h3 = document.createElement('h3');
                h3.textContent = 'Screenshot';
                card.appendChild(h3);
                card.appendChild(img);
              }
          };
        }

        if (report.scriptSources && report.scriptSources.length > 0) {
          const details = document.createElement('details');
          const summary = document.createElement('summary');
          summary.textContent = `Script sources (${report.scriptSources.length})`;
          details.appendChild(summary);
          const matchesPre = document.createElement('pre');

          // Add filter input box
          const filterInput = document.createElement('input');
          filterInput.type = 'text';
          filterInput.placeholder = 'Filter domains with regex...';
          filterInput.classList.add('filter-input')

          const today = new Date().toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });

          // Function to update the pre content based on filter
          const updateContent = (filterValue) => {
            try {
              const regex = filterValue ? new RegExp(filterValue) : null;
              const filteredSources = report.scriptSources.filter(domain =>
                !regex || regex.test(domain)
              );
              const adblockRules = [
                `! ${today} ${report.url}`,
                ...filteredSources.map(domain => `||${domain}^`)
              ].join('\n');
              matchesPre.textContent = adblockRules;
            } catch (e) {
              // Invalid regex - show all results
              const adblockRules = [
                `! ${today} ${report.url}`,
                ...report.scriptSources.map(domain => `||${domain}^`)
              ].join('\n');
              matchesPre.textContent = adblockRules;
            }
          };

          // Add filter input event listener
          filterInput.addEventListener('input', (e) => {
            updateContent(e.target.value);
          });

          details.appendChild(filterInput);

          // Add copy button
          const copyButton = document.createElement('button');
          copyButton.classList.add('copy-rules-button')
          copyButton.textContent = 'Copy rules';
          copyButton.onclick = () => {
            navigator.clipboard.writeText(matchesPre.textContent);
            const originalText = copyButton.textContent;
            copyButton.textContent = 'Copied!';
            setTimeout(() => {
              copyButton.textContent = originalText;
            }, 2000);
          };

          details.appendChild(copyButton);
          details.appendChild(matchesPre);

          // Initialize content
          updateContent('');

          card.appendChild(details);
        }

        return card;
      }

      form.onsubmit = async (e) => {
        e.preventDefault();

        urlInput.disabled = true;
        locationSelector.disabled = true;
        executeButton.disabled = true;
        for (const checkbox of document.querySelectorAll('input[type="checkbox"]')) {
          checkbox.disabled = true;
        }
        spinner.classList.add('active');

        const url = document.getElementById('url-input').value;

        const fieldset = document.getElementById('adblock-lists');
        const checkboxes = fieldset.querySelectorAll('input[type="checkbox"]:not(#toggle-all-lists)');
        const adblockLists = Array.from(checkboxes).reduce((acc, checkbox) => {
                acc[checkbox.id] = checkbox.checked;
                return acc;
            }, {});
        const newCard = await fetch('/check', {
          method: 'POST',
          cache: 'no-cache',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            url,
            adblockLists: adblockLists,
            location: locationSelector.value,
            screenshot: document.getElementById('full_page_screenshot').checked ? "fullPage" : true,
            slowCheck: document.getElementById('slow_check').checked,
            device: document.getElementById('devices-select').value,
            mhtmlMode: document.getElementById('mhtml-mode-select')?.value || 'full',
            includeMhtml: document.getElementById('mhtml-include-select')?.value || 'never'
          }),
        })
          .then(resp => resp.json())
          .then(report => createReportCard(report, url))
          .catch(error => createReportCard({ error, url, timestamp: new Date() }));

        if (reportList.children.length > 0) {
          reportList.insertBefore(newCard, reportList.children[0]);
        } else {
          reportList.appendChild(newCard);
        }

        urlInput.disabled = false;
        locationSelector.disabled = false;
        for (const checkbox of document.querySelectorAll('input[type="checkbox"]')) {
          checkbox.disabled = false;
        }
        executeButton.disabled = false;
        spinner.classList.remove('active');
      };
    </script>
  </body>
</html>
